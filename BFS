#include <iostream>
using namespace std;

class Queue {
private:
    int front, rear, size;
    int capacity;
    int* array;

public:
    // Constructor to initialize the queue
    Queue(int cap) {
        capacity = cap;
        front = 0;
        rear = -1;
        size = 0;
        array = new int[capacity];
    }

    // Destructor to release memory
    ~Queue() {
        delete[] array;
    }

    // Check if the queue is empty
    bool isEmpty() {
        return size == 0;
    }

    // Check if the queue is full
    bool isFull() {
        return size == capacity;
    }

    // Add an element to the queue
    void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full!\n";
            return;
        }
        rear = (rear + 1) % capacity;
        array[rear] = item;
        size++;
    }

    // Remove and return the front element of the queue
    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty!\n";
            return -1;
        }
        int item = array[front];
        front = (front + 1) % capacity;
        size--;
        return item;
    }

    // Get the front element
    int peek() {
        if (isEmpty()) {
            cout << "Queue is empty!\n";
            return -1;
        }
        return array[front];
    }
};

// Function to perform BFS traversal
void bfs(int adj[][5], int V, int start) {
    Queue q(V);             // Create a queue for BFS
    bool visited[V] = {0};  // Track visited vertices

    // Start BFS from the source vertex
    visited[start] = true;
    q.enqueue(start);

    while (!q.isEmpty()) {
        int curr = q.dequeue();  // Dequeue a vertex
        cout << curr << " ";     // Print the vertex

        // Traverse all neighbors of the current vertex
        for (int i = 0; i < V; i++) {
            if (adj[curr][i] == 1 && !visited[i]) { // Check for an edge and unvisited vertex
                visited[i] = true;  // Mark as visited
                q.enqueue(i);       // Enqueue the vertex
            }
        }
    }
}

// Function to add an edge to the graph
void addEdge(int adj[][5], int u, int v) {
    adj[u][v] = 1;
    adj[v][u] = 1; // For undirected graph
}

int main() {
    const int V = 5;        // Number of vertices
    int adj[V][V] = {0};    // Adjacency matrix initialized to 0

    // Add edges to the graph
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 2);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 4);
    addEdge(adj, 2, 4);

    // Perform BFS traversal starting from vertex 0
    cout << "BFS starting from 0:\n";
    bfs(adj, V, 0);

    return 0;
}
